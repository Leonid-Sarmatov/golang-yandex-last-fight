package postgres

import (
	"database/sql"
	"fmt"
	"log/slog"

	_ "github.com/lib/pq"

	config "github.com/Leonid-Sarmatov/golang-yandex-last-fight/orchestrator_server/internal/config"
)

type Postgres struct {
	DB *sql.DB
}

func ConnectStringFromConfig(config *config.Config) string {
	return fmt.Sprintf("host=%v port=%v user=%v password=%v dbname=%v sslmode=disable",
						config.PostgresConfig.Host,
						config.PostgresConfig.Port,
						config.PostgresConfig.User,
						config.PostgresConfig.Password,
						config.PostgresConfig.DBname,
					)
}

func NewPostgres(logger *slog.Logger, connectString string) (*Postgres, error) {
	// Пробуем создать соединение с базой данных
	db, err := sql.Open("postgres", connectString)
	if err != nil {
		logger.Error("Spawn connection to database was failed", err)
		return nil, err
	}

	// Если удалось, то добавляем соединение в возвращаемую структуру
	postgres := &Postgres{
		DB: db,
	}

	// Если по какой то причине в базе нет таблицы с запросами
	// на вычисленя, то создаем таблицу
	_, err = db.Exec(`
    CREATE TABLE IF NOT EXISTS task_table (
        id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
        expression VARCHAR(255), 
        hash VARCHAR(255), 
        status BIGINT,
		result VARCHAR(255),
		time_begin TIMESTAMP,
		time_end TIMESTAMP
    );`)

	// Если таблицу создать не удалось, то возвращаем соединение
	// и ошибку создания таблицы
	if err != nil {
		return postgres, err
	}

	// Если по какой то причине в базе нет таблицы с настройками
	// времени вычисленя, то создаем таблицу
	_, err = db.Exec(`
    CREATE TABLE IF NOT EXISTS operation_table (
        id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
        operation VARCHAR(255), 
        timeInSecond INT
    );`)

	// Если таблицу создать не удалось, то возвращаем соединение
	// и ошибку создания таблицы
	if err != nil {
		return postgres, err
	}

	return postgres, nil
}

func (p *Postgres) СheckAccountExist(userName, password string) (bool, error) {
	return true, nil
}

func (p *Postgres) CreateNewAccount(userName, password string) error {
	return nil
}
