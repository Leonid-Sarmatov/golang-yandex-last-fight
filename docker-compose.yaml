version: "3.8"
services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:2.12-2.4.0
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "example-topic:1:1"
      
  postgres:
    image: postgres:16.1
    container_name: last_fight_postgres
    restart: always
    environment:
      POSTGRES_DB: "main_database"
      POSTGRES_USER: "leonid"
      POSTGRES_PASSWORD: "password"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - leonid_network
    
  orchestrator-server:
    build:
      context: .
      dockerfile: Orchestrator
    container_name: orchestrator_server
    depends_on:
      - postgres
    ports:
      - "8082:8082"
    networks:
      - leonid_network

  frontend-server:
    build:
      context: .
      dockerfile: Frontend
    container_name: frontend_server
    depends_on:
      - postgres
    ports:
      - "8081:8081"
    networks:
      - leonid_network

networks:
  leonid_network:
    driver: bridge